{"ast":null,"code":"import { USER_LOADED, USER_LOADING, AUTH_ERROR, REGESTER_SUCCESS, REGESTER_FAIL, LOGOUT_SUCCESS, LOGIN_SUCCESS, LOGIN_FAIL } from './types';\nimport { returnErrors } from './errorActions';\nimport axios from 'axios';\nexport const loadUser = () => (dispatch, getState) => {\n  //user loading\n  dispatch({\n    type: USER_LOADING\n  }); //get token from local storage\n\n  const token = getState().auth.token; //headers\n\n  const config = {\n    headers: {\n      \"Contect-type\": \"application/json\"\n    }\n  };\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  axios.get('/api/login/user', config).then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; // Sign up\n\nexport const signup = user => dispatch => {\n  console.log(\"action: \" + user.email);\n  axios({\n    method: 'post',\n    url: '/api/signup',\n    data: user\n  }).then(user => dispatch({\n    type: REGESTER_SUCCESS,\n    payload: user.data // console.log(user)\n\n  })).catch(err => {\n    console.log(err.response.status);\n    dispatch(returnErrors(err.response.data, err.response.status, 'REGESTER_FAIL'));\n    dispatch({\n      type: REGESTER_FAIL\n    });\n  });\n}; //Log out\n\nexport const logout = () => {\n  return {\n    type: LOGOUT_SUCCESS\n  };\n}; //Login\n\nexport const login = user => dispatch => {\n  axios({\n    method: 'post',\n    url: '/api/login',\n    data: user\n  }).then(user => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: user.data\n    });\n  }).catch(err => {\n    console.log(err.response.status);\n    dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/Syed Mohdin/Desktop/jmibook/client/src/actions/authActions.js"],"names":["USER_LOADED","USER_LOADING","AUTH_ERROR","REGESTER_SUCCESS","REGESTER_FAIL","LOGOUT_SUCCESS","LOGIN_SUCCESS","LOGIN_FAIL","returnErrors","axios","loadUser","dispatch","getState","type","token","auth","config","headers","get","then","res","payload","data","catch","err","response","status","signup","user","console","log","email","method","url","logout","login"],"mappings":"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","sourcesContent":["import { \r\n    USER_LOADED, \r\n    USER_LOADING,\r\n    AUTH_ERROR,\r\n    REGESTER_SUCCESS,\r\n    REGESTER_FAIL,\r\n    LOGOUT_SUCCESS,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL\r\n} from './types';\r\nimport {returnErrors} from './errorActions'\r\nimport axios from 'axios';\r\n\r\nexport const loadUser = () => (dispatch, getState) => {\r\n    //user loading\r\n    dispatch({type:USER_LOADING})\r\n\r\n    //get token from local storage\r\n    const token = getState().auth.token;\r\n\r\n    //headers\r\n    const config = {\r\n        headers:{\r\n            \"Contect-type\":\"application/json\"\r\n        }\r\n    }\r\n    if(token){\r\n        config.headers['x-auth-token'] = token;\r\n    }\r\n\r\n    axios.get('/api/login/user', config)\r\n        .then( res => dispatch({\r\n            type:USER_LOADED,\r\n            payload:res.data\r\n        }))\r\n        .catch( err => {\r\n            dispatch(returnErrors(err.response.data, err.response.status))\r\n            dispatch({\r\n            type:AUTH_ERROR\r\n            })\r\n        })\r\n}\r\n\r\n// Sign up\r\nexport const signup = (user) => (dispatch) => {\r\n    console.log(\"action: \"+user.email)\r\n    axios({\r\n        method: 'post',\r\n        url: '/api/signup',\r\n        data: user\r\n      }).then(user =>dispatch({\r\n        type:REGESTER_SUCCESS,\r\n        payload:user.data\r\n        // console.log(user)\r\n      })).catch(err => {\r\n          console.log(err.response.status)\r\n        dispatch(returnErrors(err.response.data, err.response.status,'REGESTER_FAIL'));\r\n        dispatch({\r\n          type:REGESTER_FAIL\r\n      })})\r\n}\r\n\r\n//Log out\r\n\r\nexport const logout = () => {\r\n    return {\r\n        type:LOGOUT_SUCCESS\r\n    }\r\n}\r\n\r\n//Login\r\nexport const login = (user) => (dispatch) => {\r\n    axios({\r\n        method:'post',\r\n        url:'/api/login',\r\n        data: user\r\n    }).then(user => {\r\n        dispatch({\r\n            type: LOGIN_SUCCESS,\r\n            payload:user.data\r\n        })\r\n    }).catch(err => {\r\n        console.log(err.response.status)\r\n        dispatch(returnErrors(err.response.data, err.response.status,'LOGIN_FAIL'));\r\n        dispatch({\r\n            type:LOGIN_FAIL\r\n        })\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}